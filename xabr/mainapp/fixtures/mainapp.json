[{"model": "mainapp.category", "pk": 1, "fields": {"name": "Дизайн", "description": ""}}, {"model": "mainapp.category", "pk": 2, "fields": {"name": "Веб-разработка", "description": ""}}, {"model": "mainapp.category", "pk": 3, "fields": {"name": "Мобильная разработка", "description": ""}}, {"model": "mainapp.category", "pk": 4, "fields": {"name": "Маркетинг", "description": ""}}, {"model": "mainapp.post", "pk": 1, "fields": {"category": 1, "name": "Как мы снимаем видео инструкции для решений Рутокен", "description": "Мы решили продолжить наш цикл статей про разработку пользовательской документации, но на этот раз нам захотелось рассказать еще об одном способе создания инструкций для пользователей — это съемка видеороликов. Мы расскажем о процессе их производства: от возникновения идеи до загрузки ролика на YouTube-канал. У нас нет студии и профессиональных актеров, мы все делаем сами и хотим показать вам, что это не так сложно. Здесь вы найдете: идеи, готовые алгоритмы и, быть может, вдохновитесь на съемку своей видео инструкции.", "posts_text": "Мы решили продолжить наш цикл статей про разработку пользовательской документации, но на этот раз нам захотелось рассказать еще об одном способе создания инструкций для пользователей — это съемка видеороликов. Мы расскажем о процессе их производства: от возникновения идеи до загрузки ролика на YouTube-канал. У нас нет студии и профессиональных актеров, мы все делаем сами и хотим показать вам, что это не так сложно. Здесь вы найдете: идеи, готовые алгоритмы и, быть может, вдохновитесь на съемку своей видео инструкции.\r\nКогда обычной инструкции не достаточно\r\nИногда уже в процессе написания обычной инструкции понимаешь, хорошо бы показать какие-то процессы в видео. Например, если лампочка на устройстве, которое мы описываем, мигает несколько раз или меняет цвет. Да, можно написать —  “если лампочка устройства мигает три раза, а потом гаснет, то устройство не работает”. Вроде как всё понятно, а если лампочка не просто мигает, а несколько раз меняет цвет, то такое уже будет сложнее объяснить при помощи текста.\r\n\r\nНам надо понимать, что далеко не все можно хорошо объяснить словами. Также, если вам нужно описать новый продукт, показать как он выглядит и как работает, то лучше всего снять видео. Ну и современная молодежь любит ролики, а значит так вы можете расширить свою аудиторию.\r\n\r\nМы расскажем, как снимать ролик на конкретном примере. У нас недавно вышло новое устройство и  возникла необходимость показать нашим пользователям его уникальные возможности: работу через контактный и бесконтактный интерфейс. Лучше всего, нам кажется,  это можно сделать в видео.\r\n\r\nПервым делом мы, конечно, написали обычную инструкцию. В ней немного рассказали про смарт-карту, показали как она выглядит и описали алгоритмы ее работы в различных операционных системах. В этой инструкции есть фотографии устройства, фотографии того, как правильно подключать его к компьютеру и прикладывать к мобильному устройству. Но все это лучше всего можно показать в динамике, а это только видео. \r\n\r\nЧто делает пользователь с обычной инструкцией? Он не читает ее полностью, а находит необходимый раздел и выполняет описанную в нем процедуру. А это значит, что он будет искать обычную инструкцию в том случае, когда смарт-карта у него уже есть, и наша обычная инструкция будет полезной только для существующих пользователей и вряд ли поможет нам привлечь новых. А смарт-карта новая  一 она еще мало у кого есть. Вряд ли пользователь, который еще не купил эту смарт-карту, будет читать инструкцию на 20 страниц, ему проще посмотреть небольшой ролик и понять, что это за устройство.\r\n\r\nВсе начинается с идеи и оценки ее реализации\r\nИдея пришла уже после написания инструкции, но далеко не все подобные идеи заканчиваются реализацией. Ведь производство ролика стоит дороже написания инструкции и необходимо было осознать, действительно ли рационально сейчас тратить на это ресурсы компании. И мы задали себе вопрос: кому кроме наших пользователей может пригодиться такая видеоинструкция? Ее глобальная цель — привлечь внимание к новой смарт-карте, поэтому она точно пригодится нашим менеджерам, они смогут отправлять ролик потенциальным заказчикам. Ещё такой ролик или его фрагмент можно показывать на презентации устройства, вставить в пресс-релиз и добавить в новостную ленту в социальных сетях. А этого уже  достаточно для того, чтобы запустить процесс его производства. Ну и не стоит забывать про очевидную  цель — загрузить новый ролик на YouTube-канал, чтобы наши подписчики про нас лишний раз вспомнили. У вас цели могут быть другие.\r\n\r\nКто нужен для производства видеоинструкции\r\nИдея есть, теперь нам надо понять, все ли необходимые специалисты сейчас могут поучаствовать в производстве ролика. Давайте разбираться, кто нам нужен: \r\n\r\nРуководитель  проекта или продукта. Как вы уже догадались, того продукта, для которого мы будем снимать ролик. \r\n\r\nЗачем он нам: сформулировать цель ролика, ответить на вопросы в процессе написания сценария, вычитать сценарий и оценить ролик.\r\n\r\nТехнический писатель. Тот, который писал инструкцию для нашей смарт-карты. Он уже многое знает и напишет сценарий быстрее, чем любой другой, кому придется разбираться в этой теме. Зачем он нам: написать сценарий и снять видео с экрана своего компьютера. Также, если в видео есть реальные кадры, то нарисовать раскадровку для видеооператора. Это идеальная картина, бывает так, что технический писатель и режиссер, и оператор, и монтажер.\r\n\r\nВидеооператор. Ему  совсем не обязательно быть в теме, для него создана раскадровка, и он по ней работает. У нас это не всегда отдельный человек, если нет на это ресурсов, то тот, кто пишет сценарий и снимает живые кадры. В этот раз он у нас был. Зачем он нам: качественно снять живые кадры и при необходимости помочь с монтажом.\r\n\r\nМонтажер. У нас это тот, кто писал сценарий, он собирает весь ролик. Видеооператор может помочь ему выполнить какие-то сложные моменты. В этот раз они были: нам надо было показать одновременную работу смарт-карты в двух мобильных операционных системах.\r\n\r\nЧеловек, записывающий закадровый голос. У нас это реальный сотрудник технической поддержки, его голос знаком нашим пользователям. Он записывает закадровый голос для ролика. \r\n\r\nВ этот раз обстоятельства сложились так, что голос пришлось перезаписывать и в финальную версию попал голос технического писателя. Дальше мы про это расскажем, дадим ценный совет, чтобы таких форс-мажоров у вас не было.\r\n\r\nМаркетолог. Он смотрит финальную версию и загружает ее на YouTube-канал.\r\n\r\nВроде никого не забыли. Да, многое может делать один человек и для каких-то роликов достаточно только заказчика и исполнителя. \r\n\r\nПеред тем как мы запустим процесс производства видеоролика, нам надо выяснить, все ли участники свободны и смогут в какой-то момент подключиться к процессу. Мы все выяснили и определили сроки.\r\n\r\nСколько времени нужно на производство ролика\r\nСо сроками тоже все интересно. Если рассказывать про обычную инструкцию, то мы понимаем примерно сколько это займет времени, с видео сложнее. Оно может совсем не понравиться и какие-то моменты придется переснимать, а потом и заново монтировать. По опыту, на ролик продолжительностью 5 минут в среднем нужно 6-8 рабочих дней, это время на весь цикл производства. И надо понимать, что иногда этот срок растягивается в два и в три раза. А бывает, когда все сразу удачно складывается и требуется меньше времени.", "create_datetime": "2021-01-20T16:23:34.443Z"}}, {"model": "mainapp.post", "pk": 2, "fields": {"category": 2, "name": "Ограничение прав доступа к переменным", "description": "Конец восьмидесятых. Всего два года я отсутствовал на родном предприятии, а меня встретил уже меняющийся компьютерный мир. В отделах стали появляться персоналки: у кого IBM-PC/XT, у кого «Правец», а у кого ЕС-1840. Число пользователей БЭСМ-6 и даже ЕС и СМ-4 стало асимптотически приближаться к нулю. На фоне новых возможностей все их «фишки» сразу побледнели. Например, смешно, что еще недавно какая-нибудь замена терминала VT-340 на VT-52100 c памятью на 5 страниц, позволяющей вводить текст еще до включения БЭСМ, казалась важной.", "posts_text": "Конец восьмидесятых. Всего два года я отсутствовал на родном предприятии, а меня встретил уже меняющийся компьютерный мир. В отделах стали появляться персоналки: у кого IBM-PC/XT, у кого «Правец», а у кого ЕС-1840. Число пользователей БЭСМ-6 и даже ЕС и СМ-4 стало асимптотически приближаться к нулю. На фоне новых возможностей все их «фишки» сразу побледнели. Например, смешно, что еще недавно какая-нибудь замена терминала VT-340 на VT-52100 c памятью на 5 страниц, позволяющей вводить текст еще до включения БЭСМ, казалась важной.\r\n\r\nРасстаться со старыми заделами и навыками психологически мне было даже проще, чем многим, поскольку после двухлетнего отсутствия я вернулся на работу уже в другой отдел и, так сказать, сразу отрекся от старого мира и отряхнул его прах со своих ног.\r\n\r\nВпрочем, последние годы работа с БЭСМ-6 через диалоговую программу «Пульт» разработки МГУ, как раз очень напоминала работу за первыми персоналками и поэтому переход был несложным.\r\n\r\nА вот задачи стали другие. Отдел занимался разработкой ПО системы управления «Энергия-Буран». Точнее, отдел занимался комплексацией, верификацией, взаимодействием с наземным ПО и т.п., а собственно разработкой занималось сразу несколько отделов. Я впервые принимал участие в проекте, где были заняты десятки программистов. Язык программирования – ПРОЛ-2 разработки ИПМ АН СССР.\r\n\r\nВообще-то, девичья фамилия этого языка была «Пролог-Ц» от ПРОграммирования ЛОГики. А литера «Ц» - это, вероятно, ЦУП. Но поскольку в то время на слуху был японский Пролог с его транспьютерами, вероятно разработчикам надоело отвечать на вопросы о применении транспьютеров в «Буране», поэтому вторая версия языка вышла под таким скромным и безликим именем.\r\n\r\nЯзык был специфический, для задач управления. Типичный алгоритм выглядел так: выдать такую-то команду, подождать 0.3 миллисекунды, проверить такую-то переменную. Если она нулевая – выдать другую команду и запустить такой-то процесс. И все в таком духе.\r\n\r\nРазумеется, инструментальных средств под x86 еще не было. Поэтому в отделе родилась идея, а затем – предложение – указание – распоряжение – создать отладочный или, точнее, проверочный транслятор для персоналки. Во-первых, он облегчит процесс комплексирования и верификации, а во-вторых, возможно, несколько увеличит производительность и в других отделах, сократив число подходов к штатному транслятору (на ЕС ЭВМ).", "create_datetime": "2021-01-20T16:24:51.673Z"}}, {"model": "mainapp.post", "pk": 3, "fields": {"category": 3, "name": "Беспилотные автомобили: Итоги 2020 года", "description": "2020 год начался с боязни того, для машин-роботов начнется «зима», поскольку в 2019 году вся индустрия начала избавляться от иллюзий. Несмотря на то, что прошлый год кажется самым хаотичным в истории, вы видим, что зима сменилась на весну. В этом тексте мы вспомним главные новости года.", "posts_text": "2020 год начался с боязни того, для машин-роботов начнется «зима», поскольку в 2019 году вся индустрия начала избавляться от иллюзий. Несмотря на то, что прошлый год кажется самым хаотичным в истории, вы видим, что зима сменилась на весну. В этом тексте мы вспомним главные новости года.\r\n\r\nРеальные революции могут вызывать даже больше хайпа, чем ложные, так что неудивительно, что когда обещания на начало 2020 года не сбылись, многие были разочарованы, а индустрия столкнулась с откатом. В самом деле, многие крупные автопроизводители были рады сбавить обороты, чтобы не видеть того, как стартапы из Кремниевой Долины переворачивают индустрию с ног на голову. Многие компании не уловили контекст происходящего, из-за чего к концу года мы получили как реальные продукты, так и невероятные обещания и оценки. Давайте вспомним 13 самых важных историй 2020 года, причем и первое, и второе место будут посвящены Waymo.\r\n\r\n13. Стартапы умирают, OEM-производители отступают\r\n\r\nimage\r\n\r\nDrive.AI закрылась и была продана Apple\r\n\r\nГод начался с смерти двух хорошо профинансированных стартапов: Starsky Trucking (он просто закрылся) и Drive.AI (команда была выкуплена Apple). Многие автопроизводители, в свою очередь, отказались от амбициозных планов по созданию систем беспилотной езды и стали работать над системами помощи водителю (чтобы конкурировать с Tesla). Отступление автопроизводителей стало плохой новостью для всех стартапов, основанных с целью дальнейшей продажи компаниям, которым нужна помощь с инновациями.\r\n\r\n12. Cruise анонсирует Origin\r\n\r\nimage\r\n\r\nАвтомобиль Origin от Cruise\r\n\r\nGM вместе с Cruise в основном проводили тесты и демонстрации доработанных Chevrolet Bolt, но затем они заявили, что хотят создать собственный автомобиль и представили Origin – угловатое транспортное средство, предназначенное для совместного использования. Cruise утверждают, что это не просто концепт-кар, а автомобиль, который находится в активной разработке (OEM-производители проводили презентации множества концептов роботакси).\r\n\r\n11. Совет по транспортной безопасности критикует Tesla и Uber, водителю Uber предъявлены обвинения\r\n\r\nimage\r\n\r\nРасследование аварии автомобиля Uber со смертельным исходом", "create_datetime": "2021-01-20T16:26:13.294Z"}}, {"model": "mainapp.post", "pk": 4, "fields": {"category": 4, "name": "Много ли у вас открытых вкладок?", "description": "У меня в браузере обычно — от 50 до 120. Иногда — 200, в другой раз — 15.\r\n\r\nПонятно, что голыми руками с большим количеством вкладок справиться трудно. Поэтому я написал расширение для браузера, которое автоматически организует вкладки по схожести содержания.\r\n\r\nЭто радикально упростило поиск и чтение статей. И даже волосы мои стали шелковистей. Ну т.е. стал продуктивней.", "posts_text": "У меня в браузере обычно — от 50 до 120. Иногда — 200, в другой раз — 15.\r\n\r\nПонятно, что голыми руками с большим количеством вкладок справиться трудно. Поэтому я написал расширение для браузера, которое автоматически организует вкладки по схожести содержания.\r\n\r\nЭто радикально упростило поиск и чтение статей. И даже волосы мои стали шелковистей. Ну т.е. стал продуктивней.\r\nОткуда берется столько вкладок?\r\n\r\nВ основном они появляются из Inoreader, иногда из соц-сетей и других ресурсов.\r\nНовые публикации просматриваю раз в неделю-две или реже. Что-то остается открытым, что-то отправляется на потом, но чаще остается открытым.\r\n\r\nЗа раз получается просматривать много. Но одно из преимуществ такого подхода — это возможность получить более полную картину из разных точек зрения.\r\n\r\nКроме того, читать сразу несколько статей по одной тематике намного легче, чем каждую статью по отдельности.\r\n\r\nЧто делает расширение?\r\n\r\nДемо-видео вместо тысячи слов.\r\n\r\n\r\n\r\nВкладки группируются по главному содержанию, используя ограниченный «мешок слов». Слова для мешка определяются по частоте упоминания плюс разные эвристики.\r\n\r\nЧтобы вообще найти содержание страницы, используется адаптация Readability.js. Это версия библиотеки, которую Mozilla использует в Firefox, для показа страниц в режиме читателя.\r\n\r\nК сожалению, Readability.js далеко не всегда находит содержание страниц. Поэтому для особо популярных ресурсов сделана отдельная предобработка.\r\n\r\nСейчас здесь: Reddit, HackerNews и YouTube.\r\n\r\nСписок точно не исчерпывающий. Если у кого-то появиться необходимость добавить новый ресурс, то это можно сделать через GitHub. Там же можно оставить и другую обратную связь, т.к. расширение не собирает какую либо аналитику.\r\n\r\nТакже есть отдельные ресурсы, страницы которых сортируются только по URL, если таких — больше одной. Это страницы GitHub и GitLab. Т.о. вы получите группировку в соответствии с файловой структурой проектов.\r\n\r\nСделано специально для umputun. Ну почти.\r\n\r\nАлгоритм не сверхсложный, поэтому работает полностью локально без особой нагрузки. Бывает он приятно удивляет даже меня — разработчика, который постоянно прокручивает алгоритм в голове.\r\n\r\nВ одном случае, это были две статьи, которые совместно подсказали новую идею. Тематика у них была разная, но были общие ключевые слова, поэтому Smart TabS разместил их рядом.\r\n\r\nВ другом случае, это был браузер для рабочих вопросов. После некоторых подсказок Smart TabS разместил вкладки намного удачней, чем я ожидал, так что работать стало намного проще.\r\n\r\nДа, бывают ситуации, когда вкладки размещаются не совсем так, как могли бы. Тогда их можно самостоятельно разместить там, где нужно. Они будут сохранять указанное расположение, пока вы так или иначе его не измените.", "create_datetime": "2021-01-20T16:27:09.989Z"}}, {"model": "mainapp.post", "pk": 5, "fields": {"category": 3, "name": "ТАСС заявил о 30% росте заказов Ozon Express после январских каникул. У SellerFox другие данные", "description": "По заявлению ТАСС количество заказов в сервисе быстрой доставки Ozon Express с 12 по 18 января выросло на 30% в недельном сопоставлении. Мы с помощью сервиса аналитики и парсинга маркетплейсов проанализировали заказы за этот период и у нас получились совсем другие данные.", "posts_text": "По заявлению ТАСС количество заказов в сервисе быстрой доставки Ozon Express с 12 по 18 января выросло на 30% в недельном сопоставлении. Мы с помощью сервиса аналитики и парсинга маркетплейсов проанализировали заказы за этот период и у нас получились совсем другие данные.\r\n\r\nOzon Express - сервис быстрой доставки свежих продуктов питания, бакалеи, детских товаров, товаров для дома и зоотоваров по Москве и Подмосковью. Экспресс-доставка курьером — от 40 до 60 минут. Курьерская доставка — от 1,5 до 4,5 часов.\r\n\r\n\"Количество заказов в сервисе быстрой доставки Ozon Express за прошедшую неделю выросло на 30% в недельном сопоставлении — на рост спроса повлияли наступившие в Москве холода. Пики заказов пришлись на самые холодные дни недели — субботу и воскресенье.\"Ozon пресс-служба.\r\n\r\nМы уже писали, что категория Ozon Express показала на новогодних каникулах очень существенный рост и количество заказов по отношению к декабрю 2020 года выросло почти в 4 раза. Поэтому нас так заинтересовало заявление ТАСС - неужели рост продолжился и дальше и холода могли так повлиять на количество заказов? Мы проверили.\r\n\r\n\"Количество заказов в сервисе быстрой доставки Ozon Express с 12 по 18 января выросло на 30% в недельном сопоставлении\"-ТАСС\r\n\r\nДля этого мы сравнили заказы за 2 периода 12-18 января и 5-11 января. Также внимательнее посмотрели на количество заказов в выходные 15-16 января.\r\n\r\nПо графику визуально видно, что количество заказов не увеличилось. Мы решили вручную просчитать заказы на одной и второй неделе:\r\n\r\n5-11 января: количество заказов 47263 штук\r\n\r\n12-18 января: количество заказов 43819 штук\r\n\r\nТо есть мы видим, что ни о каком росте заказов речь не идет. И если смотреть неделя к неделе, то наблюдается даже спад на 7,28%. Также мы не видим никакого пика 15-16 января. Что же имел ввиду ТАСС, делая такие заявления? Ведь все же данные по заказам находятся в открытых источниках и их очень легко проверить.\r\n\r\nМожет быть выросли продажи в денежном выражении?\r\n5-11 января: сумма заказов 7979591 рублей\r\n\r\n12-18 января: сумма заказов 7295603 рублей\r\n\r\nНет, в денежном выражении заказы тоже просели.\r\n\r\nМожет быть выросли продажи в отдельных подкатегориях Ozon Express?\r\nЛидерами продаж в период с 5 по 18 января были следующие подкатегории:\r\n\r\nмолочные продукты и яйца\r\n\r\nовощи, фрукты, зелень\r\n\r\nсоки, воды, напитки\r\n\r\nдетские товары\r\n\r\nзамороженные продукты\r\n\r\nМы изучили динамику роста продаж во всех подкатегориях Ozon Express за указанный период и ни в одной из них не нашли какого-то роста. Везде наблюдается небольшой спад после новогодних каникул.\r\n\r\nТаким образом, мы видим, что ни о каком росте заказов в период с 12 по 18 января речи не идёт и тут возможны, на наш взгляд, 2 варианта:\r\n\r\n1) ТАСС не совсем правильно интерпретировал пресс-релиз Ozon. К сожалению, мы не смогли найти в открытых источниках сам пресс-релиз маркетплейса Ozon и не можем подтвердить или опровергнуть наше предположение.\r\n\r\n2) Ozon посчитал в Ozon Express все заказы жителей Москвы и Московской области за неделю, либо добавил в Ozon Express какие-то дополнительные подкатегории, которые на сайте Озона не относятся к Ozon Express.", "create_datetime": "2021-01-21T12:44:33.035Z"}}, {"model": "mainapp.post", "pk": 6, "fields": {"category": 1, "name": "Тестовое задание для фронтендера", "description": "На Хабре уже было 244 статьи о карьере, тысячи комментариев о плохих собеседованиях разработчиков и множество недовольных программистов всех сортов и расцветок. Не то что бы это был необходимый минимум для успешного найма, но когда начал давать тестовые задания, становится сложно остановиться.", "posts_text": "На Хабре уже было 244 статьи о карьере, тысячи комментариев о плохих собеседованиях разработчиков и множество недовольных программистов всех сортов и расцветок. Не то что бы это был необходимый минимум для успешного найма, но когда начал давать тестовые задания, становится сложно остановиться.\r\n\r\nВерстальщик — такой человек, который хорошо разбирается в HTML и CSS и немного знает JavaScript. Ну то есть понимает, как в целом всё работает, но сильно не погружается. При этом бывает непросто выбрать хорошего верстальщика, потому что всех учат по-разному.\r\n\r\nЧтобы решить эту проблему, собираем в одном месте опыт десятков собеседований с верстальщиками. Вместе с Дашей Владыко из фронтенд-аутсорса «Лига А.» рассказываем, на что смотреть в тестовом задании джунов и мидлов, и как отличить хороший результат от плохого. Плюс несколько практических советов — например, как выбирать плагины.\r\n\r\nНа что смотреть в целом\r\nСоответствует ли результат ТЗ? Всё работает? Всё заверстано? Джуну прощаются мелкие недочёты, но он хотя бы показывает что хотел сделать как можно лучше, просто пока не хватает практики. Если сделано спустя рукава, то это тоже видно.\r\n\r\nПример: сверстать «аккордеон»\r\n\r\nСоответствие ТЗ: аккордеон завёрстан по макету, нет ошибок в HTML. JavaScript написан без onclick, код для аккордеона можно переиспользовать на других страницах и блоках.\r\n\r\nЕсли аккордеон завёрстан, но при нажатии на кнопку ничего не происходит, то не работает. Для мидла это минус, джуну можно простить, если к внешнему виду и семантике не подкопаться. Джуну также прощается, если JavaScript есть, но в семантике есть ошибки или результат немного не соответствует макету (другие отступы, например, или забыл про уголки).\r\n\r\nПредусмотрено ли переполнение? Сильно ли едет макет при добавлении или удалении элементов? Можно ли ввести 4 строки, если в дизайне нарисовано 2? Предусмотрены ли максимальные и минимальные размеры?\r\n\r\nМидлы обычно предусматривают ситуации, когда сайт нуждается в доработке или клиент попросит что-либо поменять. При продуманном переполнении верстка не едет.\r\n\r\nСтолько плюсов каждому по нраву\r\n\r\nКак оформлена сборка? Есть readme? Запускаются таски из gulp? Такие мелочи показывают, есть ли у человека опыт в разработке. Обычно, когда сверстаешь пару проектов, учишься наводить порядок в файлах и умеешь работать с таск-менеджерами. В идеале нужна чистая сборка: всё разложено по папкам, комментарии убраны, лишних файлов нет.\r\nВыделяются ли компоненты? Проект у мидла — «конструктор», где блоки можно менять местами и ничего не ломается.\r\n\r\nКак подключаются скрипты и стили? Есть ли инлайн? Есть ли onclick=\"\" или style=\"\"? Джуну какие-то вещи простить можно, мидлу нет.\r\n\r\nМожно ли скачать из гита? Не очень хорошо, когда ссылка на папку, а тестовое лежит в архиве. Я хочу скачать проект, посмотреть, как работает сборка, как выглядит готовая страница, а не только увидеть код.\r\n\r\nКак реализованы ховеры и адаптив? Это не обязательно, но будет плюсом, показывает опыт и аккуратность. Сразу видно, как человек импровизирует, так как в макете не рисуются разные состояния кнопок. Хорошая импровизация показывает, что человек может заморочиться и сделать «вау» потому что ему хочется так сделать, а не потому что так сказал босс.", "create_datetime": "2021-01-21T12:48:29.049Z"}}, {"model": "mainapp.post", "pk": 7, "fields": {"category": 2, "name": "Ajax, REST API OpenCart", "description": "В статье рассмотрим как устроены ajax запросы в OpenCart, в том числе запросы через api OpenCart, познакомимся с новым понятием front controller и немного коснемся темы ajax REST API.", "posts_text": "В статье рассмотрим как устроены ajax запросы в OpenCart, в том числе запросы через api OpenCart, познакомимся с новым понятием front controller и немного коснемся темы ajax REST API.\r\n\r\nКлиент\r\nКлиентская часть OpenCart работает с использованием jquery, а значит можно использовать $.ajax из этой библиотеки. Ссылка на документацию. Примеры ajax запросов на клиентской части можно посмотреть в admin/view/template/sale/order_form.tpl (.twig для OpenCart 3.0).\r\n\r\nСервер\r\nПросматривая все тот же файл admin/view/template/sale/order_form.tpl (для OpenCart 2.3) можно понять, что в качестве адреса вызова используется классическая схема роутинга OpenCart. Посмотрим на один из запросов:\r\n\r\n$.ajax({\r\n    url: 'index.php?route=customer/customer/autocomplete&token=<?php echo $token; ?>&filter_name=' +  encodeURIComponent(request),\r\n    ...\r\nВсе просто: url - путь до контроллера и, если надо, имя метода этого контроллера.\r\n\r\nТо есть, нам нужно создать класс контроллера, затем из файлов представления можно вызывать методы этого контроллера ajax запросами.\r\n\r\nСоздадим контроллер нашего нового тестового модуля по пути admin/controller/extension/module/myajax.php:\r\n\r\nclass ControllerExtensionModuleMyAjax extends Controller\r\n{\r\n    public function index()\r\n    {\r\n        $this->response->addHeader('Content-Type: application/json');\r\n        $this->response->setOutput(json_encode(\r\n            [\r\n                \"success\" => true, \r\n                \"message\" => \"ok\", \r\n                \"data\" => []\r\n            ]\r\n        ));\r\n    }\r\n}\r\nВ классе контроллера есть объект response, это экземпляр класса Response , который расположен по пути system/library/response.php. Он позволяет управлять ответом сервера. Нас интересуют только 2 метода:\r\n\r\naddHeader($header) - добавить http заголовок, header строковый аргумент\r\n\r\nsetOutput($output) - установить данные для вывода, output строковый аргумент\r\n\r\nДля формирования ответа на запрос в методе контроллера можно использовать -\r\n\r\n$this->response\r\n\r\nТак как OpenCart имеет 2 режима доступа/контекста (admin, catalog), то передаваемые данные в запросах разные:\r\n\r\nadmin - требует токен в get параметре (получить можно из объекта класса контроллера):\r\n\r\nдля OpenCart 2.3 token, который берется из $this->session->data['token']\r\n\r\nдля OpenCart 3.0 ¨C4C, который берется из¨C14C¨C5C\r\n\r\ncatalog - в общем случае не требует токена, но есть нюансы о которых позже\r\n\r\nТеперь чтобы осуществить ajax запрос достаточно в файл представления (читай в html) подставить js (код для OpenCart 2.3):\r\n\r\n$.ajax({\r\n    url: '<?php echo $admin; ?>index.php?route=extesion/module/myajax&token=<?php echo $token; ?>',\r\n    type: 'get',\r\n    dataType: 'json',\r\n    success: function(json) {\r\n        alert(\"success: \"+json[\"success\"]+\"\\n\"+\"message: \"+json[\"message\"]);\r\n    },\r\n    error: function(xhr, ajaxOptions, thrownError) {\r\n        alert(thrownError + \"\\r\\n\" + xhr.statusText + \"\\r\\n\" + xhr.responseText);\r\n    }\r\n});\r\nВ этом коде в url admin это путь указывающий контекст запроса (admin или catalog). Для контекста есть 2 дефайна, определенных в admin/config:\r\n\r\nHTTP_SERVER или HTTP<b style=\"box-sizing: border-box;\">S</b>_SERVER - путь до директории admin (проще - админка), где будет осуществлен поиск контроллера для выполнения запроса\r\n\r\nHTTP_CATALOG или ¨C6C¨C15C- корень сайта, однако контроллеры будут браться из директории¨C16C¨C7C\r\n\r\nAjax API\r\nПросматривая файл представления admin/view/template/sale/order_form.tpl (OpenCart 2.3), можно увидеть что из админки осуществляются ajax запросы на catalog контекст, с использованием особого токена.\r\n\r\nСначала объявляется глобальная переменная token, затем ajax запрос на адрес /index.php?route=api/login, который отвечает json данными, в которых есть ключ token:\r\n\r\nvar token = '';\r\n \r\n// Login to the API\r\n$.ajax({\r\n    url: '<?php echo $catalog; ?>index.php?route=api/login',\r\n    type: 'post',\r\n    data: 'key=<?php echo $api_key; ?>',\r\n    dataType: 'json',\r\n    crossDomain: true,\r\n    success: function(json) {\r\n    //...\r\n \r\n        if (json['token']) {\r\n            token = json['token'];\r\n        }\r\n    },\r\n    error: function(xhr, ajaxOptions, thrownError) {\r\n        alert(thrownError + \"\\r\\n\" + xhr.statusText + \"\\r\\n\" + xhr.responseText);\r\n    }\r\n});\r\nКонтроллер этого запроса находится в catalog/controller/api/login.php ControllerApiLogin::index. Он:\r\n\r\nсоздает новую сессию\r\n\r\n(catalog/model/account/api.php - ModelAccountApi::addApiSession) и\r\n\r\nгенерирует для нее случайный токен (функция token находится в system/helper/general.php),\r\n\r\nкоторый возвращается в json этого ajax запроса, если доступ по api (api_key) разрешен для текущего пользователя (Админка-Система-API).\r\n\r\nДальше разбирая представление admin/view/template/sale/order_form.tpl можно увидеть, что последующие ajax запросы, которые по адресу route=api/... используют этот самый tokenдля определения права доступа, таким образом (в каждом api файле, в каждом методе)¨C25C существует такой кусок кода для определения права осуществлять запрос:\r\n\r\nif (!isset($this->session->data['api_id'])) {\r\n    $json['error']['warning'] = $this->language->get('error_permission');\r\n} else {\r\n    ...\r\n}\r\nAjax запросы через catalog контекст можно осуществлять с использованием token для безопасного доступа\r\n\r\nА теперь копнем глубже и выясним, как это происходит внутри движка, ведь можно отправлять ajax запросы и без токена.\r\n\r\nПросматривая код файла index.php отправляемся в system/startup.php, оттуда следуем в system/framework.php в самый конец и видим такое вот:\r\n\r\n// Front Controller\r\n$controller = new Front($registry);\r\n \r\n// Pre Actions\r\nif ($config->has('action_pre_action')) {\r\n    foreach ($config->get('action_pre_action') as $value) {\r\n        $controller->addPreAction(new Action($value));\r\n    }\r\n}\r\nЗдесь видим новое понятие front controller, код которого находится в system/engine/front.phpв классе Front.\r\n\r\nНиже следует мое субъективное определение этого понятия :)\r\n\r\nПодробных комментариев найти не удалось, но судя по коду front controller это главный/передний контроллер, он запускает общий контроллер startup/router относительно директории controller контекста (admin/controller или catalog/controller), который выполняет первичные контроллеры, указанные в $_['action_pre_action']; в файле system/config/catalog.php.\r\n\r\nВ коде выше происходит только добавление первичных контроллеров во front controller, а их исполнение осуществляется кодом ниже, в методе dispatch (внутри метода перед выполнением action указанного в $config->get('action_router')):\r\n\r\n// Dispatch\r\n$controller->dispatch(new Action($config->get('action_router')), new Action($config->get('action_error')));\r\nСреди первичных контроллеров есть startup/session относительно catalog/controller, где в ControllerStartupSession::index находится интересующий нас код для авторизации в api через токен. Вкратце:\r\n\r\nпроисходит проверка обращения к api/ и наличия get параметра token\r\n\r\nудаление старых api сессий\r\n\r\nвыборка актуальной api сессии на основании ip адреса запросившего и его токена\r\n\r\nстарт сессии с id из $_COOKIE[\"api\"]\r\n\r\nобновление времени модификации сессии, (чтобы она осталась жива, то есть не была устаревшей)\r\n\r\nТеперь, когда исполнение кода дойдет до целевого контроллера, $this->session->data['api_id'] уже будет инициализировано, если указана актуальная комбинация токена и ip адреса.\r\n\r\nAjax REST API\r\nДанная глава описывает возможный вариант создания и встроенные средства реализации REST API в OpenCart.\r\n\r\nМы рассмотрели реализацию ajax запросов OpenCart для admin и catalog контекстов.\r\n\r\nЕсли говорить об admin, то предполагается более рациональным реализовывать контроллеры именно в admin контексте. Однако, такое не всегда возможно. Иногда один и тот же код контроллера (возможно речь о методе контроллера) должен использоваться в обработчике catalog события (например при изменении заказа), так и отдельно непосредственно при работе с заказом через админку. Чтобы устранить такие случаи можно реализовать контроллеры в catalog контексте и организовать для них безопасный доступ (о чем говорится в предыдущей главе).\r\n\r\nДля реализации REST API в OpenCart есть все необходимое:\r\n\r\nобъект для работы с ответом сервера в контроллере $this->response, а именно методы addHeader и setOutput \r\n\r\nбезопасная работа с административным доступом через catalog¨C22Cконтекст\r\n\r\nединая точка входа api через¨C24C¨C10C¨C25C контекст, в директорию¨C26C¨C11C¨C27C, можно размещать свои файлы контроллеров и при помощи ajax осуществлять к ним запросы\r\n\r\nНа стороне сервера надо создать контроллеры в catalog/controller/api/, а на стороне клиента добавить ajax запросы в нужные файлы представлений с использованием токена, полученного в результате ajax запроса api/login. Если в этих файлах нет такого ajax запроса, тогда необходимо добавить его, например, взяв из admin/view/template/sale/order_form.tpl.Теперь чтобы сделать REST API достаточно изучить, что это такое, несколько ссылок:\r\n\r\nhttps://ru.wikipedia.org/wiki/REST\r\n\r\nhttps://habr.com/ru/post/483202/", "create_datetime": "2021-01-21T12:51:22.835Z"}}, {"model": "mainapp.post", "pk": 8, "fields": {"category": 4, "name": "Топ-15 ошибок в email-маркетинге", "description": "Чем грамотнее ведется email-маркетинг, тем больше прибыли он приносит. Мы подготовили подборку самых распространенных ошибок, которые допускаются при запуске рассылок. Рассказываем, к чему они приводят, как их избежать и не упустить прибыль.", "posts_text": "Чем грамотнее ведется email-маркетинг, тем больше прибыли он приносит. Мы подготовили подборку самых распространенных ошибок, которые допускаются при запуске рассылок. Рассказываем, к чему они приводят, как их избежать и не упустить прибыль.\r\n\r\nКампания будет успешной, если избежать ошибок на старте.\r\nКампания будет успешной, если избежать ошибок на старте.\r\n1. Работать с устаревшей базой\r\nМногие компании собирают контакты годами и, когда запускают рассылку, оказывается, что часть адресов некорректна и письма на них доставить невозможно. Например, email написали с ошибкой или клиент давно не пользуется электронным ящиком, и тот превратился в спам-ловушку. Если лимит возвратов (ошибок доставки) будет превышен, рассылку могут заблокировать.\r\n\r\nРешение\r\n\r\nНачинайте рассылку, как только получили первые контакты. Разработайте приветственную серию писем, которая автоматически будет уходить новым подписчикам.\r\n\r\nЕсли рассылку не отправляли более 3 месяцев, перед запуском очистите базу от невалидных адресов, например, с помощью встроенного в сервис DashaMail валидатора.\r\n\r\nСервис очищает базу от некорректных адресов и дублей, чтобы рассылку получали только «живые» подписчики\r\nСервис очищает базу от некорректных адресов и дублей, чтобы рассылку получали только «живые» подписчики\r\n2. Не использовать реанимационные письма\r\nЕсли с базой давно не работали, то пользователи могут не помнить, что подписывались на рассылку и будут жаловаться на СПАМ. От этого может пострадать ваша почтовая репутация.\r\n\r\nРешение\r\n\r\nОтправляйте реанимационные письма тем, кто давно не получал вашу рассылку.\r\n\r\nНапомните, когда и при каких обстоятельствах пользователь оставил вам электронный адрес.\r\n\r\nРасскажите о пользе, которую подписчик получит от рассылки: специальные предложения, полезные материалы, бонусы.\r\n\r\nВ реанимационном письме напомните где и как получатель подписался на рассылку, и чем будут полезны для него ваши рассылки\r\nВ реанимационном письме напомните где и как получатель подписался на рассылку, и чем будут полезны для него ваши рассылки\r\n3. Не настраивать домен\r\nЕсли не настроить домен, то им могут воспользоваться злоумышленники. В результате пострадает почтовая репутация: письма будут отправляться в спам, а домен будет внесен в блэклисты.\r\n\r\nРешение\r\n\r\nПропишите в DNS-настройках вашего домена записи SPF, DKIM и DMARC. Эти цифровые подписи призваны проверять подлинность отправителя и запускать утвержденный алгоритм действий при возникновении подозрений на мошенничество.\r\n\r\n4. Отправлять рассылку с адреса, зарегистрированного на общедоступном домене\r\nИспользовать в регулярных рассылках обратные адреса на общедоступной почте недопустимо. Пример – ххх@mail.ru. Последствия все те же: спам и блокировки.\r\n\r\nРешение\r\n\r\nВыход – обратный адрес на корпоративном домене. Например: news@fixprice.news.\r\n\r\nПример рассылки с обратным адресом на корпоративном домене\r\nПример рассылки с обратным адресом на корпоративном домене\r\nЗавести корпоративную почту достаточно просто, а главное, что это можно сделать совершенно бесплатно. Как именно? Рассказали в статье.\r\n\r\n5. Нарушать правила почтовых провайдеров\r\nЕсли не соблюдать правила почтовых провайдеров, рассылка может попасть в их спам-фильтр. Вот некоторые из самых распространенных нарушений: \r\n\r\nне добавить ссылку отписки;\r\n\r\nверстать письмо сплошной картинкой;\r\n\r\nиспользовать одинаковые обратные адреса для транзакционных и массовых рассылок;\r\n\r\nиспользовать сервисы для сокращения ссылок и др.\r\n\r\nРешение\r\n\r\nСледите за соблюдением правил можно самостоятельно или с помощью инструментов email-сервисов. Например, в сервисе DashaMail предусмотрена функция СтопСпам для проверки технических настроек отправителя и контента письма.\r\n\r\nСервис определяет вероятность прохождения спам-фильтра Яндекс, Gmail, Рамблер и Mail.ru\r\nСервис определяет вероятность прохождения спам-фильтра Яндекс, Gmail, Рамблер и Mail.ru\r\n6. Не проверять рассылку перед отправкой\r\nВ этом случае письма могут некорректно отображаться на разных устройствах, улетать в спам, и исправить это будет нельзя.\r\n\r\nРешение\r\n\r\nОтправляйте рассылку тестовым адресам разных провайдеров. Так вы убедитесь, что верстка адаптируется, письмо не попадает в спам, теги персонализации работают. Если у рассылки выявятся проблемы, вы сможете их устранить.\r\n\r\nКроме того, DashaMail предлагает встроенный инструмент для предпросмотра отображения рассылки в разных почтовых клиентах, который называется \"Провидица\". Он позволяет проверить отображение верстки в наиболее популярных почтовых программах:\r\n\r\nПровидица позволяет проверить отображение верстки в наиболее популярных почтовых программах ещё до отправки рассылки\r\nПровидица позволяет проверить отображение верстки в наиболее популярных почтовых программах ещё до отправки рассылки\r\n7. Отправлять много писем после долгого молчания\r\nЕсли вы давно не делали рассылку, при резком скачке активности почтовые провайдеры могут заподозрить вас в отправке спама.\r\n\r\nРешение\r\n\r\nЧтобы рассылка не вызывала подозрений, постепенно увеличивайте количество отправляемых писем: первый день – 500, второй – 800, третий – 1200, четвертый – 2000 и т. д.\r\n\r\n8. Отправлять письма нерегулярно\r\nБессистемная рассылка «убивает» базу: подписчики не знают, когда ждать ваши письма, забывают, кто вы, и отписываются или жалуются.\r\n\r\nРешение\r\n\r\nСоставьте план рассылок на несколько месяцев вперед, чтобы даже форс-мажор не нарушил распорядок. Когда пользователи знают, чего от вас ожидать, они открывают письма чаще и охотнее переходят по ссылкам.\r\n\r\n9. Пренебрегать прехедером\r\nПрехедер, как и заголовок, помогает привлечь внимание подписчика и побудить его открыть письмо. Код письма или сухой текст вместо актуальной информации сокращают шансы на открытие.\r\n\r\nРешение\r\n\r\nУделяйте прехедеру не меньше внимания, чем выбору заголовка или имени отправителя. Пусть он будет логичным дополнением темы, внесет интригу или, напротив, ясность – в зависимости от вашей ниши и задачи рассылки.\r\n\r\nНа фоне других удалось выделиться прехедерам от Дайджест Нетологии (интрига), Читай город (информативность) и Ozon (лаконичность)\r\nНа фоне других удалось выделиться прехедерам от Дайджест Нетологии (интрига), Читай город (информативность) и Ozon (лаконичность)\r\n10. Не предусмотреть форму обратной связи\r\nВ письмах, которые приходят с адреса «noreply», читается посыл – «Не пишите нам в ответ». Это допустимо для транзакционных писем, но нежелательно для массовой рассылки – негативно сказывается на лояльности, равно как и отсутствие формы обратной связи или шаблонные адресанты.\r\n\r\nРешение\r\n\r\nОткажитесь от обезличенных отправителей, например, Admin.\r\n\r\nНе используйте в адресе «noreply».\r\n\r\nПроверяйте, какой обратной связью делятся подписчики.\r\n\r\nВпечатление от трогательного письма, подписанного, к слову, главным редактором любимого портала, немного подпортил адресант – noreply@tourister.ru\r\nВпечатление от трогательного письма, подписанного, к слову, главным редактором любимого портала, немного подпортил адресант – noreply@tourister.ru\r\n11. Делать рассылку бесполезной для подписчика\r\nПисьма с навязчивым призывом к покупкам чаще отправляют в спам. Туда же попадают рассылки, которые не несут пользы конкретному получателю. Например, женщине, которая год назад покупала подгузники для шестимесячных детей, отправляют предложения с товарами для новорожденных.\r\n\r\nРешение\r\n\r\nРассылки должны быть заточены под интересы клиентов. Изучите свою целевую аудиторию, определите ожидания и страхи пользователей, чтобы снимать возражения в письмах.\r\n\r\nНа основе указанных при регистрации данных и поведенческих факторов составьте профиль подписчика. Сегментируйте клиентов по полу, возрасту, часовому поясу, хобби и др. – критерии зависят от сферы вашего бизнеса. Чем более персонализированным будет письмо, тем выше шансы на открытие, переход по ссылке и покупку. Подробнее о персонализации читайте в статье в нашем блоге.\r\n\r\n12. Вводить подписчика в заблуждение\r\nКлиенты отвернутся, если увидят, что их часто вводят в заблуждение. Например, вы указали, что акция завершится 14 января, а 15 снизили цену еще больше. Другая ситуация: пользователь соглашался получать полезный контент, а на деле через день видит рекламные письма.\r\n\r\nРешение\r\n\r\nЧтобы подписчики вам доверяли, выполняйте обещанное. Например, если указали в письме, что в следующем месяце появится новая коллекция, подготовьте рассылку заранее или включите эту тему в контент-план – на случай ухода в отпуск или увольнения маркетолога, аврала или форс-мажора.\r\n\r\n13. Подбирать заголовки, которые не соответствуют письму\r\nНе соответствующий содержанию письма заголовок – манипуляция, которая в краткосрочной перспективе даст высокий процент открытий, но в перспективе обернется разочарованием подписчика, утратой доверия к отправителю, ростом жалоб и отписок.\r\n\r\nРешение\r\n\r\nМотивируйте к открытию, но не обманывайте. Откажитесь от кликбейта в пользу правдивого отражения содержания письма и сохранения репутации.\r\n\r\n14. Вставлять слишком много призывов к действию\r\nКогда в одном письме встречаются просьбы перейти на сайт, оформить заказ и поделиться акцией в социальных сетях, цель рассылки теряется и пользователь не понимает, на что обратить внимание. \r\n\r\nРешение\r\n\r\nПридерживайтесь правила: одно письмо – один призыв к действию – одна ссылка.\r\n\r\nКогда в письме несколько призывов к действию, сложнее отследить эффективность рассылки. В примере от Monopoly всего одна ссылка, так что задача предельно понятна – перейти на сайт партнера, чтобы получить приз.\r\nКогда в письме несколько призывов к действию, сложнее отследить эффективность рассылки. В примере от Monopoly всего одна ссылка, так что задача предельно понятна – перейти на сайт партнера, чтобы получить приз.\r\n15. Не проверять гипотезы\r\nКакой цвет кнопки удачнее или когда именно отправлять рассылку – решение, продиктованное интуицией, может быть ошибочным. Это чревато сниженными показателями и потерей прибыли.\r\n\r\nРешение\r\n\r\nЧтобы внедрять только удачные варианты, используйте сплит-тесты. С их помощью определяйте лучшую гипотезу на основании статистики. Результатам тестирования можно доверять: учитывается даже математическая погрешность.\r\n\r\nСервис DashaMail поможет вам избежать большинства распространенных ошибок, с которыми при запуске рассылок сталкиваются как начинающие маркетологи, так и профи. Присоединяйтесь!", "create_datetime": "2021-01-21T12:56:22.969Z"}}, {"model": "mainapp.post", "pk": 9, "fields": {"category": 3, "name": "GIT-ветвление и попытка не запутаться", "description": "Наша компания занимается разработкой ПО для госсектора и постоянно сертифицирует свои программы для обработки гос. тайны. А это накладывает определенные ограничения и самое главное из них: мы должны предоставить все исходные коды нашего проекта и если попросят - суметь объяснить, что делает каждая строчка. Проблема в том, что если используешь готовые компоненты, то их исходники тоже нужно предоставлять и уметь все про них рассказать. Поэтому мы решили сделать свой фреймворк, ведь про него мы будем знать все. Фреймворк мы сделали и назвали его \"Platform\". Он продолжает развиваться и все свои проекты мы делаем на нем. Проблема заключается в том что, после выпуска продукта и его сдачи мы вынуждены его замораживать и не можем в него вносить больших изменений - только исправлять баги, а большинство багов обнаруживается как раз в самом фреймворке и в результате мы вынуждены иметь версии фреймворка для каждого сданного проекта (ну, или для группы одновременно выпущенных продуктов). В итоге, нам пришлось придумать свой набор правил и схему ветвления в GIT для разработки Platform. Схема приведена ниже вместе с примером работы по ней:", "posts_text": "Наша компания занимается разработкой ПО для госсектора и постоянно сертифицирует свои программы для обработки гос. тайны. А это накладывает определенные ограничения и самое главное из них: мы должны предоставить все исходные коды нашего проекта и если попросят - суметь объяснить, что делает каждая строчка. Проблема в том, что если используешь готовые компоненты, то их исходники тоже нужно предоставлять и уметь все про них рассказать. Поэтому мы решили сделать свой фреймворк, ведь про него мы будем знать все. Фреймворк мы сделали и назвали его \"Platform\". Он продолжает развиваться и все свои проекты мы делаем на нем. Проблема заключается в том что, после выпуска продукта и его сдачи мы вынуждены его замораживать и не можем в него вносить больших изменений - только исправлять баги, а большинство багов обнаруживается как раз в самом фреймворке и в результате мы вынуждены иметь версии фреймворка для каждого сданного проекта (ну, или для группы одновременно выпущенных продуктов). В итоге, нам пришлось придумать свой набор правил и схему ветвления в GIT для разработки Platform. Схема приведена ниже вместе с примером работы по ней:\r\n\r\nОбщие правила ветвления проектов:\r\n1.     Введены следующие понятия:\r\n\r\na.      Мажорная версия программы – версия программы в рамках определенной концепции, меняется при значительных изменениях концепции, обозначается v-m, где m – номер мажорной версии;\r\n\r\nb.     Минорная версия программы – подверсия в рамках одной концепции, меняется при добавлении нового функционала или незначительной переделке существующего, обозначается v-m-n, где m – номер мажорной версии, n – номер минорной версии;\r\n\r\nc.      Релиз программы – вариант минорной версии, номер релиза меняется при незначительных изменениях и/или исправлении багов в соответствующей минорной версии программы, обозначается r-m-n-p, где m – номер мажорной версии, n – номер минорной версии, p – номер патча;\r\n\r\n2.     Разработка нового функционала ведётся в ветке master. Ветка master защищённая, для помещения изменений в неё разработчиками выполняется merge-request. Решение по принятию merge-request принимает технолог на основании просмотра исходного кода вносимых изменений (code review).\r\n\r\n3.     Для каждой мажорной версии создается ветка разработки нового (дополнительного функционала). Для текущей мажорной версии это ветка master, для прошлых мажорных версий ветки разработки называются по шаблону: dev-v-m, где m – номер мажорной версии. Работа с этой веткой аналогична работе с веткой master. Для каждой ветки dev-v-m создается своя база данных и именуется по шаблону project_name_dev_v_m. Ветка разработки для мажорной версии создается сразу после начала работы над следующей мажорной версии.\r\n\r\n4.     Каждая задача – это новая тематическая ветка, которую должен создать разработчик перед началом выполнения задачи. Ветки создаются на основании текущего коммита ветки в которой должна быть выполнена задача. Ветки именуются по шаблонам:\r\n\r\na.      t-xxxxx, если это задача на разработку нового функционала  (xxxxx – номер задачи из корпоративной системы)\r\n\r\nb.     b-xxxxx, если это задача по исправлению бага (xxxxx – номер задачи из корпоративной системы).\r\n\r\n5.     После выполнения задачи и помещения коммитов тематической ветки в ветку, для которой выполнялась задача, разработчик удаляет тематическую ветку.\r\n\r\n6.     При постановке задачи на исправление бага нужно указывать минорную версию, в которую нужно вносить изменения, например, в версию v-1-1 (если ничего не указано, то баг исправляется в тестируемой на данный момент минорной версии). При исправлении бага в ветке master, главный технолог должен принимать решение о необходимости включения этого исправления в ветку с актуальной версией. Задачи по добавлению функционала предполагают помещение их в ветку master по умолчанию, иначе должна быть указана конкретная ветка (ветки) разработки прошлой мажорной версии.\r\n\r\n7.     Периодически (по мере реализации функционала) формируются минорные версии. Каждая минорная версия – это отдельная ветка. Ветка минорной версии обозначается по шаблону v-m-n, где m – мажорный номер версии, n – минорный номер версии. В рамках версий формируются релизы. Релизы формируются тогда, когда исправлены все обнаруженные баги в тестируемой минорной версии. Релиз обозначается тегом формата r-m-n-p, где m –   мажорный номер версии, n – минорный номер версии, p – номер патча (патч выпускается только для исправления багов). После создания ветки минорной версии в ней правятся только баги. Ветка минорной версии создается главным технологом в момент окончания разработки функционала версии, но до начала основного тестирования. При формировании минорной ветки, нужно дополнять в проекте файл с изменениями в этой версии по отношению к предыдущей.\r\n\r\n8.     После формирования релизного тега, ветка минорной версии должна быть слита с основной веткой разработки.\r\n\r\n9.     После выпуска релиза следующей минорной версии, поддержка предыдущей минорной версии прекращается.\r\n\r\n10. В начале работы над проектом нет смысла в создании минорной версии, в которой исправляются только баги, т.к. данная версия не предоставляется внешнему заказчику. Поэтому до формирования первой минорной версии тестирование происходит на базе ветки master и баги исправляются в ней же. На более поздних этапах проекта, когда еще нет необходимости передавать версии, но уже появилась потребность проводить демонстрации можно начать создавать минорные версии, но в этом режиме обнаруженные и исправленные в минорной версии баги должны обязательно исправляться и в ветке разработки (минорная ветка должна сливаться с веткой разработки). При этом демонстрации всегда выполняются на текущем релизе с протестированным функционалом, а не на последних разработках.\r\n\r\n11. Небольшую доработку функционала можно вносить в ветки минорной версии, но это только в крайних случаях.\r\n\r\n12. Коммиты именуются по следующему правилу: t-#####-taskname или b-#####-bugname.\r\n\r\n\r\nНа  рисунке представлен пример стратегии ветвления для условного проекта, который отражает вышеизложенные  правила. Рассмотрим пример подробно:\r\n\r\nПроект начался с 01.01.17 с создания нового репозитория и инициирующего коммита C1 в ветке master. Ветка master предназначена для основного процесса разработки и добавления нового функционала. Ветка мастер защищенная и никто, кроме главного технолога или его заместителя (далее под главным технологом так же подразумевается и его заместитель) не имеет права вносить в неё изменения. Для получения первого релиза было запланировано добавить функционал, описанный в задача 1 и 2 в корпоративной системе. Для реализации каждой из задач на основании коммита C1 разработчиками были созданы ветки и названы в соответствии с соглашением о наименовании (t-####) t-1 и t-2. В рамках данных веток были сделаны коммиты (например, в ветке t-1 t-1-C1 и t-1-C2). После создания функционала в своих ветках разработчики хорошо его протестировали самостоятельно, потому что они профессионалы и хорошие люди и им не наплевать на то, что они делают и на остальной коллектив. После этого разработчики выполняют merge request для своих веток, т.е. сигнализируют технологу, что они закончили свою работу и хотят, чтобы их код был внесен в основную ветку разработки. Главный технолог отправляет задачу на code review (поручает это другому программисту или производит самостоятельно). Если код не устраивает, то merge request отклоняется, и программист переделывает работу. Если код успешно проходит стадию code review, то главный технолог принимает merge request и в ветке мастер появляются коммиты C2 и С3. После появления этих коммитов в ветке master задачи начали тестировать тестировщики и аналитики ответственные за за задачу. Если были обнаружены ошибки, то задачи возвращаются на переделку, если нет, то задача закрывается в корпоративной системе.\r\n\r\n         08.01.17 был готов функционал для версии 1-0 и главный технолог принял решение о создании релизной ветки v-1-0. Релизную ветку v-1-0 начала тестировать команда релизного тестирования. Для ветки v-1-0 создается отдельная база. Команда тестироания обнаружила ряд багов и поставила задачи в корпоративной системе. На основании этих задач были созданы ветки b-1 и b-3 и после исправления багов разработчики сделали merge request’ы в ветку v-1-0. Далее повторяются шаги, описанные выше по обработке merge request и ветке v-1-0 появляются коммиты v-1-0-C1, v-1-0-C2 и v-1-0-C3. Отметим, что в релизной ветке не добавляется новый функционал, а только исправляются ошибки.\r\n\r\nПараллельно в ветке master начали разработку нового функционала, который должен войти в версию v-1-1. Далее в ветке master на рис.1 не отражаются ветки задач для добавления функционала, чтобы не засорять схему, коммиты при этом все равно показаны. Обратим внимание, что после коммита C4, был обнаружен баг b-2 и по результатам его исправления разработчик сделал merge-request и в master и в текущую релизную ветку v-1-0, т.к. этот баг встречается в обеих ветках.\r\n\r\n01.02.17 релизная ветка v-1-0, была протестирована командой релизного тестирования и главный технолог принял решение, что можно выпустить первый релиз проекта. Был сформирован тег r-1-0-1. И дистрибутив был передан заказчику. Главный технолог принял решения слить ветку v-1-0 с релизной веткой, т.к. баги, которые были в ней исправлены встречаются и в ветке master.\r\n\r\nВ процессе использования релиза к-1-0-1 заказчик выявил баг b-3 и он был исправлен в ветке v-1-0 и 08.02.17 было выпущено обновление-патч и сформирован тег r-1-0-2. В этот же момент главный технолог принял решение, что функционал для версии v-1-1 наработан и создал следующую релизную ветку v-1-1.  В ветке master команда разработчиков начала разрабатывать функционал для мажорного релиза v-2-0. Поддержка ветки v-1-0, продолжалась до момента выпуска нового релиза версии v-1-1. При этом баг b-4, исправленный в ветке v-1-0 главный технолог решил не помещать в ветку master, т.к. в ней он оказался не актуален, в связи с переделкой модуля, в котором встречался.\r\n\r\n04.03.17 командой разработки был выпущен релиз версии r-1-1-1. Одновременно с этим руководство приняло решение сменить основную версию продукта с 1 на 2. Поскольку необходимость добавлять функционал в версию v-1 может остаться, то была создана отдельная ветка разработки (dev-v-1) для первой версии (для нее была создана отдельная база данных). Ветка dev-v-1 является аналогом ветки master, но для версии v-1. При этом поддержка версии v-1-0, была прекращена, т.к. ей на смену пришла версия v-1-1.\r\n\r\n15.03.17 был накоплен функционал для v-2-0 и была создана ветка v-2-0.\r\n\r\n18.03.17 был накоплен функционал для выпуска нового релиза версии v-1 и была создана релизная ветка v-1-2.\r\n\r\n01.04.17 были выпущены релизы версии v-1 (r-1-2-1) и версии v-2 (r-2-0-1). В этот момент также была прекращена поддержка v-1-1, т.к. ей на смену пришла версия v-1-2.", "create_datetime": "2021-01-21T13:00:56.397Z"}}, {"model": "mainapp.post", "pk": 10, "fields": {"category": 1, "name": "14 свежих и полезных дизайн-ресурсов в Январе", "description": "Что в сегодняшнем выпуске: различные генераторы, крутые источники для вдохновения, стильные иконки, топовые продукты из Product Hunt за 2020 год, инструменты для экспорта анимаций и гифок, и многое другое.", "posts_text": "Что в сегодняшнем выпуске: различные генераторы, крутые источники для вдохновения, стильные иконки, топовые продукты из Product Hunt за 2020 год, инструменты для экспорта анимаций и гифок, и многое другое.\r\n\r\n\r\nВнимание, тёмный паттерн — cамые горячие ресурсы мы оставили в конце - так что скролльте с предвкушением.\r\n\r\nПогнали!\r\n\r\n14. Vektors\r\n\r\nVektors – это агрегатор коллекций с иллюстрациями. Все иллюстрации этого ресурса бесплатные (но на некоторые коллекции есть пользовательские лицензии).\r\n\r\nВ Vektors вы найдете иллюстрации от художников по всему миру и для самых разных проектов. Иллюстрации доступны в форматах PNG, SVG, Figma, Sketch.\r\n\r\nНа данный момент паки насчитывают 70+ единиц.\r\n\r\n13. Pattern Generator\r\n\r\nБраузерный генератор текстур позволяет создавать уникальные royalty-free текстуры.\r\n\r\nУ Pattern Generator гибкие настройки: выбрав базовый стиль, вы можете затем настроить свою текстуру с помощью цветов, фильтров и преобразований. Каждый стиль узора имеет свои уникальные преобразования. Кнопка «Shuffle» — это та же кнопка «Random», которая перемешивает стили и выдает рандомизированные элементы.\r\n\r\nЭкспортнуть файл можно не только в JPEG или PNG, но и в качестве кода для inline SVG и фоновой картинки CSS.\r\n\r\n12. Gumaffiliates\r\n\r\nGumaffiliates – новый ресурс, который позволяет развивать партнерский маркетинг через Gumroad.\r\n\r\nИдеален как для креативщиков без аудитории, так и для affiliate-маркетологов с аудиторией, но без своей продукции.\r\n\r\nПриобретя товар (Gumaffiliates стоит $1):\r\n\r\n1) Креативщики получают таблицу людей с аудиторией;\r\n\r\n2) Affiliate-маркетологи получают таблицы с продуктами, которые нужно продвигать.\r\n\r\nВ таблицы входят следующие данные: название продукта (в случае affiliate партнера – это название аудитории), ниша, сайт, контактные данные.\r\n\r\n11. Parametric Color Mixer\r\n\r\nParametric Color Mixer позволяет генерировать цвета и затем настраивать палитру при помощи интерактивных эквалайзеров.\r\n\r\nПосле того, как вы определились с выбором цвета, его можно регулировать посредством следующих параметров: Положение, Воздействие, Диапазон, Смешивание.\r\n\r\nКоличество цветовых гамм можно как добавлять, так и уменьшать.\r\n\r\nЭкспорт – в SVG и CSS.\r\n\r\n10. Game UI Database\r\n\r\nЭтот сайт создан специально для дизайнеров, специализирующихся на создании игр.На этом ресурсе вы найдете обширную базу самых разных элементов: от различных попап-меню до HUD элементов. Просто кладезь информации для игровых дизайнеров.Почти 13 000 скриншотов из 355 игр. Более 80 типов экранов.\r\n\r\nУ сайта очень удобная система поиска. Боковая панель отображает фильтры для типов экранов: меню заголовков, состояния, статистика, информация, сетевые функции, игровой процесс и HUD.\r\n\r\nТакже можно фильтровать по жанру, теме, эстетическим элементам игр, устройству / элементам управления и т.д.\r\n\r\n9. GIFRun\r\n\r\nGIFRun позволяет создавать GIF-изображения без водяных знаков с разных соцсетей, типа YouTube, Facebook, TikTok, Vimeo, Twitter и многих других, где есть функция встроенного видео.\r\n\r\nПросто вставьте ссылку источника, определите продолжительность и время начала, добавьте текст (по желанию) и ваш GIF-файл готов.\r\n\r\n8. Doodle Strudel\r\n\r\nЕсли вы работаете художником или иллюстратором – то попробуйте Doodle Strudel. Этот генератор задач от Пабло Стэнли – отличная вещь для тех, у кого кризис идей.\r\n\r\nТолько здесь вы найдете такие безумные задачи, как например: “Нарисовать остроумную лошадку с большими наушниками, которая читает книгу на улице”. ?\r\n\r\n7. Scale\r\n\r\nScale – отличный сайт с красивыми иллюстрациями, которые подойдут как для дизайна приложений или сайтов, так и для различных промо-материалов или презентаций.\r\n\r\nНужную иллюстрацию можно найти в поисковой строке, или профильтровать по полу, а при настройке – можно подбирать цветовую схему в поле HEX-кода.\r\n\r\nИллюстрации доступны в SVG и PNG форматах.\r\n\r\nРесурс совсем новый, но коллекция эффектных иллюстраций насчитывает уже более 120 единиц.\r\n\r\nАвторы гарантируют каждый день выкладывать что-то новое.\r\n\r\n6. UX Database\r\n\r\nКаталог UX-ресурсов, который мы заслуживаем.\r\n\r\nВ этой новой мощной базе данных вы найдете тщательно отобранные продукты на все случаи жизни: лучшие инструменты, плагины, методологии, учебные ресурсы и многое другое.\r\n\r\nСортировать можно по следующим категориям: исследования, анализ, визуальный дизайн, дизайн интерфейсов, продукты нового поколения (AR / VR, чат-боты и т. д.), продуктивности, обучению, мультимедиа.\r\n\r\nБаза данных также удобна тем, что каждый ресурс помечен доступностью: платный, бесплатный или с лицензией Freemium.\r\n\r\n5. Pattern Collect\r\n\r\nPattern Collect – это своеобразный Dribbble для художников, создающих узоры и текстуры.\r\n\r\nС этой галереей, вы можете не только ловить вдохновение и улучшать свои навыки, но и загружать туда свои работы, параллельно освежая свое портфолио.\r\n\r\nРесурс содержит шаблоны в 45 категориях, включая: абстракцию, лица, геометрические фигуры, краски, ретро и многое другое.\r\n\r\n4. Flow\r\n\r\nFlow – это новый игрок на рынке моушн-дизайна. В арсенал инструмента входит:\r\n\r\n· Импорт файлов Figma, Sketch, XD, Illustrator, Affinity и т.д. (в будущем обещают добавить поддержку Instagram и Dribbble);\r\n\r\n· Большой ассортимент самых разных функций для крутого анимирования;\r\n\r\n· Прямой экспорт ваших анимаций из Sketch / Figma в чистый код для Swift, React, SVG и др.\r\n\r\nАнимации onboarding экранов, кнопок, рекламного контента и промо-роликов – Flow станет отличным помощником в добавлении изюминки вашему продукту.\r\n\r\nК тому же, интерфейс Flow интуитивно понятен, т.к. вобрал в себя лучшие практики интерфейса дизайн-инструментов последних лет. Поэтому, если вы умеете работать в Figma или Sketch – значит вы быстро разберетесь и с Flow.\r\n\r\n3. Byte Dance Icons\r\n\r\nByte Dance Icons — крутая коллекция иконок из Figma community, содержащая\r\n\r\nпочти 3000 элементов для самых разных проектов. Иконки доступны в стилях outlined, filled и two-tone.\r\n\r\nДля использования иконок в коде доступна документация для Vue и React.\r\n\r\nКоллекция постоянно обновляется.\r\n\r\n2. Best of Product Hunt\r\n\r\nОдин энтузиаст собрал в Notion таблицу с лучшими продуктами на Product Hunt за 2020 год. Здесь вы найдете коллекцию из более чем 360 продуктов.\r\n\r\nВ настройках просмотра можно выбрать наиболее удобный для себя тип просмотра контента: вид галереи, вид доски или вид таблицы. Таблица содержит всю необходимую информацию по каждому продукту: название проекта, дата запуска на ProductHunt, количество голосов, ссылка на картинку.\r\n\r\nНа 1-ом месте у нас статья The State of Design Systems: 2020. Это очень информативный материал, где Google провел исследование касательно использования дизайн-систем в 2020 году. В этом исследовании Google опросил более 1000 дизайнеров.\r\n\r\n1. The State of Design Systems 2020\r\n\r\nДелимся с вами основными результатами.\r\n\r\nUI киты, по мнению 83% опрошенных – одна из главных составляющих дизайн-системы. Что в очередной раз подтверждает эффективность его использования.\r\n\r\nFigma – лидер в таких компонентах, как:\r\n\r\n1) Инструменты для дизайна цифровых продуктов;\r\n\r\n2) Инструменты дизайн-документации и передачи файлов разработчикам;\r\n\r\n3) Инструменты, используемые для управления дизайн-системами.\r\n\r\nMaterial Design – с отрывом на первом месте в сегменте используемых дизайн-систем. Далее идут Apple’s Human-Interface Guidelines и Bootstrap (неожиданно!).\r\n\r\nВсе больше компаний предпочитают создавать собственные дизайн-системы. 80% респондентов сообщили, что они разрабатывали собственные дизайн-системы внутри компаний. Основная причина – своя дизайн-система лучше соответствует бренду компании.\r\n\r\nНа этом всё. Забирайте себе в коллекцию, если нашли что-нибудь полезное для себя. Как только наберем новых ресурсов, ждите новый пост.", "create_datetime": "2021-01-21T13:08:21.913Z"}}]